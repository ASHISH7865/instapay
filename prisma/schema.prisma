// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model UserInfo {
  id                    String        @id @default(uuid())
  userId                String        @unique
  firstName             String
  lastName              String
  username              String        @unique
  primaryEmailAddresses String        @unique
  gender                String
  phoneNumber           String        @unique
  city                  String
  state                 String
  country               String
  postalCode            String
  setupCompleted        Boolean       @default(false)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  // Relationships with wallet should  be one to one
  wallet                Wallet?
}

model Wallet {
  id                 String   @id @default(uuid())
  walletUniqueName   String   @unique
  balance            Float
  walletPasswordType String
  walletPin          String
  currencyPreference String
  usagePreference    String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  transactionLimit   Float
  // Define foreign keys and relationships
  user               UserInfo @relation(fields: [userId], references: [userId])
  userId             String   @unique

  // relationships with transaction should be one to many
  transactions       Transaction[]
}

// Define the Transaction table
model Transaction {
  id            String             @id @default(uuid())
  trnxType      TransactionType
  purpose       TransactionPurpose
  senderId      String
  recipientId   String
  amount        Float
  balanceBefore Float
  balanceAfter  Float
  status        TransactionStatus  @default(PENDING)
  trnxSummary String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Define foreign keys and relationships
  wallet       Wallet @relation(fields: [walletId], references: [id])
  walletId     String

}

enum TransactionType {
  DEBIT
  CREDIT
}

enum TransactionPurpose {
  DEPOSIT
  TRANSFER
  WITHDRAWAL
  REVERSAL
}

// Enum for Transaction Status
enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
}
